name: Windows
on: 
  push:
    branches: master
    tags:
      - 'V*'
env:
  # Path to the solution file relative to the root of the project.
  SOLUTION_FILE_PATH: Library/build
  BUILD_CONFIGURATION: Release
  BUILD_PLATFORM: x64
  PYTHON_PATH: C:/hostedtoolcache/windows/Python/3.8.8/x64
  BASIC_PYTHON: 3.8
  HOME: D:/a/GMRSS_MPE/GMRSS_MPE
  AppInstaller: GMRSSofMPE-Windows-Installer
jobs:
  buildApp:
    name: GMRSS_MPE_WINDOWS
    runs-on: windows-latest
    steps:
      # checkout source code
      - uses: actions/checkout@v2

      # config msbuild
      - name: Add MSBuild to PATH
        uses: microsoft/setup-msbuild@v1

      # install Qt5
      - name: Install Qt
        uses: jurplel/install-qt-action@v2.13.0
        with:
          version: '5.15.2'
          host: 'windows'
          target: 'desktop'
          dir: '${{ github.workspace }}/QT/'

      # install dependencies, e.g. VTK
      - name: install dependencies
        working-directory: ${{ env.GITHUB_WORKSPACE }}
        run: |
          git clone https://github.com/zguoch/dependencies_swEOS.git
          cd dependencies_swEOS/windows
          unzip -qq swigwin-4.0.2.zip
          unzip -qq VTK8.2.zip

      # get short SHA of commit 
      - name: Add SHORT_SHA env property with commit short sha
        run: |
          echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
      - name: info 
        run: |
          cmake --version
          g++ --version
          echo ${{ github.ref }}
          echo "commit id short" ${SHORT_SHA}

      # build GMRSS_MPE library
      - name: build library
        working-directory: ${{ env.GITHUB_WORKSPACE }}
        run: |
          cd ${{env.HOME}}
          mkdir Library/build
          cd Library/build
          cmake -DCMAKE_BUILD_TYPE=${{env.BUILD_CONFIGURATION}} -DCMAKE_GENERATOR_PLATFORM=${{env.BUILD_PLATFORM}} ..
          msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} GMRSS_MPE.vcxproj
          msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} INSTALL.vcxproj
          cd ${{env.HOME}}

      # build GMRSS_MPE cmd app
      - name: build cmd app
        working-directory: ${{ env.GITHUB_WORKSPACE }}
        run: |
          cd ${{env.HOME}}
          mkdir commandline\build
          cd commandline\build
          cmake -DCMAKE_BUILD_TYPE=${{env.BUILD_CONFIGURATION}} -DCMAKE_GENERATOR_PLATFORM=${{env.BUILD_PLATFORM}} ..
          msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} GMRSS_MPE.sln
      
      # build desktop app
      - name: build desktop app
        working-directory: ${{ env.GITHUB_WORKSPACE }}
        run: |
          cd ${{env.HOME}}
          mkdir desktop/build
          cd desktop/build
          cmake -DCMAKE_BUILD_TYPE=${{env.BUILD_CONFIGURATION}} -DCMAKE_GENERATOR_PLATFORM=${{env.BUILD_PLATFORM}} -DVTK_DIR=${{env.HOME}}/dependencies_swEOS/windows/VTK8.2/lib/cmake/vtk-8.2 -DCMAKE_INSTALL_PREFIX=${{env.HOME}}/install ..
          # -DCPACK_GENERATOR=ON 
          msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} GMRSS_MPE.vcxproj
          msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} INSTALL.vcxproj
          ../../QT/Qt/5.15.2/msvc2019_64/bin/windeployqt.exe ${{env.BUILD_CONFIGURATION}}/GMRSSofMPE.exe
          msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} PACKAGE.vcxproj

      # # package
      # - name: package zip format
      #   # if: ${{ matrix.python.version == env.BASIC_PYTHON }}
      #   working-directory: ${{ env.GITHUB_WORKSPACE }}
      #   run: |
      #     cd ${{env.HOME}}/desktop/build
      #     7z a -tzip GMRSSofMPE-Windows-Installer.zip ${{env.HOME}}/install/*
      
      # # debug workflow
      # - name: Setup tmate session
      #   uses: mxschmitt/action-tmate@v3

      - name: upload app
        # if: ${{ matrix.python.version == env.BASIC_PYTHON }}
        uses: actions/upload-artifact@v2
        with:
          name: GMRSS_MPE_windows_${{env.SHORT_SHA}}
          path: |
            ${{env.HOME}}/desktop/build/${{env.AppInstaller}}.exe
      
      # tag 上传Release
      - name: get tag name
        if: startsWith(github.event.ref, 'refs/tags/')
        run: |
          echo "GIT_TAG=$(git describe --tags --abbrev=0)" >> $GITHUB_ENV
          echo "GIT_TAG=$(git describe --tags --abbrev=0)"
      - name: upload exe install
        if: startsWith(github.event.ref, 'refs/tags/') && matrix.python.version == env.BASIC_PYTHON 
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{env.HOME}}/desktop/build/${{env.AppInstaller}}.exe
          asset_name: ${{env.AppInstaller}}.exe
          tag: ${{ github.ref }}
          overwrite: true